// NEXT REACT
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
// DEPENDENCY (PACKAGES, LIBS, INTERFACES, TYPES)
import { useSession } from "next-auth/react";
import axios from "axios";
import useSWR from "swr";
import Swal from "sweetalert2";
import {
	ClipboardDocumentIcon,
	DocumentDuplicateIcon,
	EyeIcon,
	MagnifyingGlassIcon,
	PencilSquareIcon,
	PlusIcon,
	TrashIcon,
	XMarkIcon,
} from "@heroicons/react/24/outline";
import { IDocumentData } from "@/interfaces/interfaces";
// COMPONENTS
import Loading from "@/components/Loading";
import DownloadDisposisi from "@/components/DownloadDisposisi";
import Layout from "@/components/Layout";

const fetcher = async (url: string) =>
	await axios.get(url).then((res) => res.data);
const disposisiURL = "/api/documents/disposisi";

export default function Disposisi() {
	const { data: session } = useSession();
	const router = useRouter();
	const [isSearching, setIsSearching] = useState(false);
	const [searchData, setSearchData] = useState([]);

	const {
		data,
		error,
		isLoading,
	}: { data: IDocumentData[]; error: any; isLoading: boolean } = useSWR(
		session ? disposisiURL : null,
		fetcher,
		{
			refreshInterval: 1000,
		}
	);

	if (isLoading) return <Loading />;
	if (error) alert(error);

	async function handleDelete(id: string, isSent: boolean): Promise<void> {
		await Swal.fire({
			title: "Hapus?",
			text: "Surat disposisi yang dihapus tidak bisa dikembalikan!",
			icon: "warning",
			showCancelButton: true,
			color: "#111827",
			confirmButtonColor: "#60a5fa",
			cancelButtonColor: "#f87171",
			confirmButtonText: "Ya",
			cancelButtonText: "Batal",
		}).then((result) => {
			if (result.isConfirmed) {
				if (isSent) {
					Swal.fire({
						title: "Gagal!",
						text: "Surat disposisi yang sedang dikirim tidak dapat dihapus!",
						icon: "error",
						color: "#111827",
						confirmButtonColor: "#60a5fa",
					});
				} else {
					axios.delete(`/api/documents/${id}`);
					Swal.fire({
						title: "Surat disposisi berhasil dihapus!",
						icon: "success",
						color: "#111827",
						confirmButtonColor: "#60a5fa",
					}).then(() => {
						router.replace(router.asPath);
					});
				}
			}
		});
	}

	async function handleSearch(e: any) {
		const results: any = data.filter((data: any) => {
			if (e.target.value === "") return data;
			return data.content.nomor
				.toLowerCase()
				.includes(e.target.value.toLowerCase());
		});
		setSearchData(results);
	}

	return (
		<>
			<Head>
				<title>GEMADISPOSISI - Disposisi</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Layout>
				<h1 className="my-4 text-4xl font-semibold">Surat Disposisi</h1>
				{/* MENU BOX */}
				<div className="flex divide-x-2 divide-gray-600 w-fit mb-4 rounded-md bg-gray-800 text-white">
					<button
						type="button"
						className="flex gap-2 p-3 rounded-l-md transition-all duration-150 hover:bg-gray-600"
						onClick={() => router.push("disposisi/create")}
					>
						<PlusIcon className="w-6" />
						<p className="hidden sm:inline-flex">Buat</p>
					</button>
					{/* <button
						type="button"
						className="flex gap-2 p-3 rounded-l-md transition-all duration-150 hover:bg-gray-600"
						onClick={() => router.push("disposisi/create")}
					>
						<EyeIcon className="w-6" />
						<p className="hidden sm:inline-flex">History</p>
					</button> */}
					{/* <button
						type="button"
						className="flex gap-2 p-2 transition-all duration-150 hover:bg-gray-600"
						onClick={() => router.push("disposisi/create")}
					>
						<ClipboardDocumentIcon className="w-6" />
						<p className="hidden sm:inline-flex">Rekap</p>
					</button> */}
					{isSearching ? (
						<>
							<button
								type="button"
								className="flex gap-2 p-3  transition-all duration-150 bg-red-400 hover:bg-red-600 cursor-pointer"
								onClick={() => setIsSearching(false)}
							>
								<XMarkIcon className="w-6" />
							</button>
							<input
								type="text"
								placeholder="Nomor..."
								className="p-2 rounded-r-md bg-gray-800 outline-none "
								onChange={handleSearch}
							/>
						</>
					) : (
						<button
							type="button"
							className="flex gap-2 p-3 rounded-r-md transition-all duration-150 hover:bg-gray-600"
							onClick={() => setIsSearching(true)}
						>
							<MagnifyingGlassIcon className="w-6" />
							<p className="hidden sm:inline-flex">Cari</p>
						</button>
					)}
				</div>
				{/* TABLE */}
				<div className="overflow-hidden mb-4 rounded-lg">
					<table className="w-full border-collapse bg-gray-600 text-left text-sm text-white">
						<thead className="bg-gray-800">
							<tr>
								<th scope="col" className="px-6 py-4 font-medium">
									Nomor
								</th>
								<th scope="col" className="px-6 py-4 font-medium">
									Tanggal
								</th>
								<th
									scope="col"
									className="px-6 py-4 font-medium hidden md:table-cell"
								>
									Perihal
								</th>
								<th scope="col" className="px-6 py-4 font-medium">
									Aksi
								</th>
							</tr>
						</thead>
						<tbody className="divide-y divide-gray-700">
							{isSearching === true && searchData.length !== 0 ? (
								searchData.map((d: any, i: any) => {
									return (
										<tr key={i} className="hover:bg-gray-700">
											<td className="px-6 py-4">{d.content.nomor}</td>
											<td className="px-6 py-4">{d.content.tanggal}</td>
											<td className="px-6 py-4 hidden md:table-cell">
												{d.content.perihal}
											</td>
											<td className="flex gap-2 px-6 py-4">
												<DownloadDisposisi />
												<div
													onClick={() =>
														router.push({
															pathname: "/surat/disposisi/edit/[id]",
															query: { id: d.id },
														})
													}
													className="flex items-center gap-1 w-fit px-2 py-1 rounded-md bg-amber-400 text-slate-800 cursor-pointer transition-colors duration-200 hover:text-white hover:bg-amber-600"
												>
													<PencilSquareIcon className="w-5" />
													<p className="hidden md:inline-flex">Edit</p>
												</div>
												<div
													className="flex items-center gap-1 w-fit px-2 py-1 rounded-md bg-red-400 text-slate-800 cursor-pointer transition-colors duration-200 hover:text-white hover:bg-red-600"
													onClick={() => handleDelete(d.id, d.isSent)}
												>
													<TrashIcon className="w-5" />
													<p className="hidden md:inline-flex">Hapus</p>
												</div>
											</td>
										</tr>
									);
								})
							) : data?.length === 0 ? (
								<tr>
									<td colSpan={4} className="px-6 py-4 text-center">
										<p>Belum ada disposisi dibuat.</p>
									</td>
								</tr>
							) : (
								data?.map((d: any, i: any) => {
									return (
										<tr key={i} className="hover:bg-gray-700">
											<td className="px-6 py-4">{d.content.nomor}</td>
											<td className="px-6 py-4">{d.content.tanggal}</td>
											<td className="px-6 py-4 hidden md:table-cell">
												{d.content.perihal}
											</td>
											<td className="flex gap-2 px-6 py-4">
												<DownloadDisposisi data={d} />
												<div
													onClick={() =>
														router.push({
															pathname: "/surat/disposisi/edit/[id]",
															query: { id: d.id },
														})
													}
													className="flex items-center gap-1 w-fit px-2 py-1 rounded-md bg-amber-400 text-slate-800 cursor-pointer transition-colors duration-200 hover:text-white hover:bg-amber-600"
												>
													<PencilSquareIcon className="w-5" />
													<p className="hidden md:inline-flex">Edit</p>
												</div>
												<div
													className="flex items-center gap-1 w-fit px-2 py-1 rounded-md bg-red-400 text-slate-800 cursor-pointer transition-colors duration-200 hover:text-white hover:bg-red-600"
													onClick={() => handleDelete(d.id, d.isSent)}
												>
													<TrashIcon className="w-5" />
													<p className="hidden md:inline-flex">Hapus</p>
												</div>
											</td>
										</tr>
									);
								})
							)}
						</tbody>
					</table>
				</div>
				{/* <div className="flex divide-x-2 divide-gray-600 w-fit ml-auto rounded-md bg-gray-800 text-white">
					<button
						type="button"
						className="px-3 py-2 rounded-l-md hover:bg-gray-600"
					>
						Prev
					</button>
					<button type="button" className="px-3 py-2 hover:bg-gray-600">
						1
					</button>
					<button type="button" className="px-3 py-2 hover:bg-gray-600">
						2
					</button>
					<button
						type="button"
						className="px-3 py-2 rounded-r-md hover:bg-gray-600"
					>
						Next
					</button>
				</div> */}
			</Layout>
		</>
	);
}
